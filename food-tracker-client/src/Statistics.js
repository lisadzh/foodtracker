import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Tooltip,
  Legend,
  Title,
} from "chart.js";
import { Chart } from "react-chartjs-2";
import BackButton from "./BackButton";
import BackgroundWrapper from "./components/BackgroundWrapper";
import "./Statistics.css";

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Tooltip,
  Legend,
  Title
);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–∞—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
function formatLocalDate(dateObj) {
  const offset = dateObj.getTimezoneOffset();
  const localDate = new Date(dateObj.getTime() - offset * 60 * 1000);
  return localDate.toISOString().slice(0, 10);
}

export default function Statistics() {
  const token = localStorage.getItem("token");
  const [data, setData] = useState([]);
  const [recommendations, setRecommendations] = useState([]);
  const [goals, setGoals] = useState(null);
  const [loading, setLoading] = useState(true);

  const [period, setPeriod] = useState("7");
  const [from, setFrom] = useState(() =>
    formatLocalDate(new Date(Date.now() - 6 * 86400000))
  );
  const [to, setTo] = useState(() => formatLocalDate(new Date()));
  const [sortBy, setSortBy] = useState("date");

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–µ—Ä—ñ–æ–¥—É
  useEffect(() => {
    if (period === "7") {
      setFrom(formatLocalDate(new Date(Date.now() - 6 * 86400000)));
      setTo(formatLocalDate(new Date()));
    } else if (period === "30") {
      setFrom(formatLocalDate(new Date(Date.now() - 29 * 86400000)));
      setTo(formatLocalDate(new Date()));
    }
  }, [period]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    async function fetchStatistics() {
      setLoading(true);
      try {
        const res = await axios.get(
          `http://localhost:5000/api/statistics?from=${from}&to=${to}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setData(res.data.data);
        setGoals(res.data.goals);
        setRecommendations(res.data.recommendations || []);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
      } finally {
        setLoading(false);
      }
    }

    fetchStatistics();
  }, [from, to, token]);

  const calculateAverage = (key) => {
    if (!data.length) return 0;
    const sum = data.reduce((acc, day) => acc + Number(day[key]), 0);
    return Math.round(sum / data.length);
  };

  const sortedData = [...data].sort((a, b) => {
    if (sortBy === "date") return new Date(a.date) - new Date(b.date);
    return b[sortBy] - a[sortBy];
  });

  const labels = sortedData.map((d) => d.date);
  const calories = sortedData.map((d) => d.calories);
  const protein = sortedData.map((d) => d.protein);
  const fats = sortedData.map((d) => d.fats);
  const carbs = sortedData.map((d) => d.carbs);

  return (
    <BackgroundWrapper>
      <div className="stats-container">
        <BackButton />
        <h2 className="page-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è</h2>

        <div className="date-range-controls">
          <label>–ü–µ—Ä—ñ–æ–¥:</label>
          <select value={period} onChange={(e) => setPeriod(e.target.value)}>
            <option value="7">–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤</option>
            <option value="30">–û—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤</option>
            <option value="custom">–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥</option>
          </select>

          {period === "custom" && (
            <>
              <label>–í—ñ–¥:</label>
              <input
                type="date"
                value={from}
                onChange={(e) => setFrom(e.target.value)}
              />
              <label>–î–æ:</label>
              <input
                type="date"
                value={to}
                onChange={(e) => setTo(e.target.value)}
              />
            </>
          )}

          <label>–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞:</label>
          <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
            <option value="date">–î–∞—Ç–æ—é</option>
            <option value="calories">–ö–∞–ª–æ—Ä—ñ—è–º–∏</option>
            <option value="protein">–ë—ñ–ª–∫–∞–º–∏</option>
            <option value="fats">–ñ–∏—Ä–∞–º–∏</option>
            <option value="carbs">–í—É–≥–ª–µ–≤–æ–¥–∞–º–∏</option>
          </select>
        </div>

        {loading ? (
          <p className="loading-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
        ) : (
          <>
            <div className="chart-section">
              <h3>
                –ö–∞–ª–æ—Ä—ñ—ó –∑–∞ –¥–µ–Ω—å
                <span className="info-tooltip">
                  ‚ìò
                  <span className="tooltip-text">
                    –¶–µ–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∞–∑—É—î, —Å–∫—ñ–ª—å–∫–∏ –∫–∞–ª–æ—Ä—ñ–π –í–∏ —Å–ø–æ–∂–∏–ª–∏ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è —É
                    –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ. <br />
                    –ß–µ—Ä–≤–æ–Ω–∞ –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞ –ª—ñ–Ω—ñ—è ‚Äî –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –¥–æ–±–æ–≤–∞ –Ω–æ—Ä–º–∞.
                  </span>
                </span>
              </h3>
              <Chart
                type="line"
                data={{
                  labels,
                  datasets: [
                    {
                      label: "–§–∞–∫—Ç–∏—á–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó",
                      data: calories,
                      borderColor: "#207c65",
                      backgroundColor: "rgba(144, 201, 178, 0.3)",
                      tension: 0.4,
                      fill: true,
                      pointRadius: 4,
                      pointHoverRadius: 6,
                    },
                    {
                      label: "–¶—ñ–ª—å –∫–∞–ª–æ—Ä—ñ–π",
                      data: Array(labels.length).fill(goals.calories),
                      borderColor: "#e74c3c",
                      borderDash: [6, 4],
                      pointRadius: 0,
                      tension: 0,
                    },
                  ],
                }}
                options={{
                  responsive: true,
                  plugins: { legend: { position: "top" } },
                }}
              />
            </div>

            <div className="chart-section">
              <h3>
                –ë—ñ–ª–∫–∏, –∂–∏—Ä–∏, –≤—É–≥–ª–µ–≤–æ–¥–∏
                <span className="info-tooltip">
                  ‚ìò
                  <span className="tooltip-text">
                    –ì—Ä–∞—Ñ—ñ–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –í–∞—à–µ —Ñ–∞–∫—Ç–∏—á–Ω–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è
                    –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ –∑ —Ü—ñ–ª—è–º–∏. <br />
                    –ö–æ–∂–µ–Ω —Å—Ç–æ–≤–ø—á–∏–∫ ‚Äî —Ü–µ –æ–∫—Ä–µ–º–∏–π –¥–µ–Ω—å —É –ø–µ—Ä—ñ–æ–¥—ñ.
                  </span>
                </span>
              </h3>
              <Chart
                type="bar"
                data={{
                  labels,
                  datasets: [
                    {
                      label: "–ë—ñ–ª–∫–∏ (–≥)",
                      data: protein,
                      backgroundColor: "#76b39d",
                    },
                    {
                      label: "–¶—ñ–ª—å –±—ñ–ª–∫—ñ–≤",
                      data: Array(labels.length).fill(goals.protein),
                      backgroundColor: "#ccc",
                    },
                    {
                      label: "–ñ–∏—Ä–∏ (–≥)",
                      data: fats,
                      backgroundColor: "#f4b942",
                    },
                    {
                      label: "–¶—ñ–ª—å –∂–∏—Ä—ñ–≤",
                      data: Array(labels.length).fill(goals.fat),
                      backgroundColor: "#ddd",
                    },
                    {
                      label: "–í—É–≥–ª–µ–≤–æ–¥–∏ (–≥)",
                      data: carbs,
                      backgroundColor: "#f28e8e",
                    },
                    {
                      label: "–¶—ñ–ª—å –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤",
                      data: Array(labels.length).fill(goals.carbs),
                      backgroundColor: "#eee",
                    },
                  ],
                }}
                options={{
                  responsive: true,
                  plugins: { legend: { position: "top" } },
                  scales: { y: { beginAtZero: true } },
                }}
              />
            </div>

            <div className="summary-section">
              <div className="averages-block">
                <h3>üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥</h3>
                <div className="averages-grid">
                  <div>
                    <span>–ö–∞–ª–æ—Ä—ñ—ó:</span> {calculateAverage("calories")} /{" "}
                    {goals.calories}
                  </div>
                  <div>
                    <span>–ë—ñ–ª–∫–∏:</span> {calculateAverage("protein")}–≥ /{" "}
                    {goals.protein}–≥
                  </div>
                  <div>
                    <span>–ñ–∏—Ä–∏:</span> {calculateAverage("fats")}–≥ / {goals.fat}
                    –≥
                  </div>
                  <div>
                    <span>–í—É–≥–ª–µ–≤–æ–¥–∏:</span> {calculateAverage("carbs")}–≥ /{" "}
                    {goals.carbs}–≥
                  </div>
                </div>
              </div>

              {recommendations.length > 0 && (
                <div className="recommendations-block">
                  <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>
                  <ul className="recommendations-list">
                    {recommendations.map((rec, idx) => (
                      <li key={idx}>
                        <span className="bullet">üí°</span>
                        {rec}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </BackgroundWrapper>
  );
}
